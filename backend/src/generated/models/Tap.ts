
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Tap` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Tap
 * 
 */
export type TapModel = runtime.Types.Result.DefaultSelection<Prisma.$TapPayload>

export type AggregateTap = {
  _count: TapCountAggregateOutputType | null
  _min: TapMinAggregateOutputType | null
  _max: TapMaxAggregateOutputType | null
}

export type TapMinAggregateOutputType = {
  id: string | null
  createdAt: Date | null
  updatedAt: Date | null
  userId: string | null
  gameId: string | null
}

export type TapMaxAggregateOutputType = {
  id: string | null
  createdAt: Date | null
  updatedAt: Date | null
  userId: string | null
  gameId: string | null
}

export type TapCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  userId: number
  gameId: number
  _all: number
}


export type TapMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
  gameId?: true
}

export type TapMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
  gameId?: true
}

export type TapCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
  gameId?: true
  _all?: true
}

export type TapAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Tap to aggregate.
   */
  where?: Prisma.TapWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Taps to fetch.
   */
  orderBy?: Prisma.TapOrderByWithRelationInput | Prisma.TapOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TapWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Taps from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Taps.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Taps
  **/
  _count?: true | TapCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TapMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TapMaxAggregateInputType
}

export type GetTapAggregateType<T extends TapAggregateArgs> = {
      [P in keyof T & keyof AggregateTap]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTap[P]>
    : Prisma.GetScalarType<T[P], AggregateTap[P]>
}




export type TapGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TapWhereInput
  orderBy?: Prisma.TapOrderByWithAggregationInput | Prisma.TapOrderByWithAggregationInput[]
  by: Prisma.TapScalarFieldEnum[] | Prisma.TapScalarFieldEnum
  having?: Prisma.TapScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TapCountAggregateInputType | true
  _min?: TapMinAggregateInputType
  _max?: TapMaxAggregateInputType
}

export type TapGroupByOutputType = {
  id: string
  createdAt: Date
  updatedAt: Date
  userId: string
  gameId: string
  _count: TapCountAggregateOutputType | null
  _min: TapMinAggregateOutputType | null
  _max: TapMaxAggregateOutputType | null
}

type GetTapGroupByPayload<T extends TapGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TapGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TapGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TapGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TapGroupByOutputType[P]>
      }
    >
  > 



export type TapWhereInput = {
  AND?: Prisma.TapWhereInput | Prisma.TapWhereInput[]
  OR?: Prisma.TapWhereInput[]
  NOT?: Prisma.TapWhereInput | Prisma.TapWhereInput[]
  id?: Prisma.StringFilter<"Tap"> | string
  createdAt?: Prisma.DateTimeFilter<"Tap"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Tap"> | Date | string
  userId?: Prisma.StringFilter<"Tap"> | string
  gameId?: Prisma.StringFilter<"Tap"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  game?: Prisma.XOR<Prisma.GameScalarRelationFilter, Prisma.GameWhereInput>
}

export type TapOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  game?: Prisma.GameOrderByWithRelationInput
}

export type TapWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.TapWhereInput | Prisma.TapWhereInput[]
  OR?: Prisma.TapWhereInput[]
  NOT?: Prisma.TapWhereInput | Prisma.TapWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"Tap"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Tap"> | Date | string
  userId?: Prisma.StringFilter<"Tap"> | string
  gameId?: Prisma.StringFilter<"Tap"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  game?: Prisma.XOR<Prisma.GameScalarRelationFilter, Prisma.GameWhereInput>
}, "id">

export type TapOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
  _count?: Prisma.TapCountOrderByAggregateInput
  _max?: Prisma.TapMaxOrderByAggregateInput
  _min?: Prisma.TapMinOrderByAggregateInput
}

export type TapScalarWhereWithAggregatesInput = {
  AND?: Prisma.TapScalarWhereWithAggregatesInput | Prisma.TapScalarWhereWithAggregatesInput[]
  OR?: Prisma.TapScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TapScalarWhereWithAggregatesInput | Prisma.TapScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Tap"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Tap"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Tap"> | Date | string
  userId?: Prisma.StringWithAggregatesFilter<"Tap"> | string
  gameId?: Prisma.StringWithAggregatesFilter<"Tap"> | string
}

export type TapCreateInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutTapsInput
  game: Prisma.GameCreateNestedOneWithoutTapsInput
}

export type TapUncheckedCreateInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
  gameId: string
}

export type TapUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutTapsNestedInput
  game?: Prisma.GameUpdateOneRequiredWithoutTapsNestedInput
}

export type TapUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  gameId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TapCreateManyInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
  gameId: string
}

export type TapUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TapUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  gameId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TapCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
}

export type TapMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
}

export type TapMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  gameId?: Prisma.SortOrder
}

export type TapListRelationFilter = {
  every?: Prisma.TapWhereInput
  some?: Prisma.TapWhereInput
  none?: Prisma.TapWhereInput
}

export type TapOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type TapCreateNestedManyWithoutGameInput = {
  create?: Prisma.XOR<Prisma.TapCreateWithoutGameInput, Prisma.TapUncheckedCreateWithoutGameInput> | Prisma.TapCreateWithoutGameInput[] | Prisma.TapUncheckedCreateWithoutGameInput[]
  connectOrCreate?: Prisma.TapCreateOrConnectWithoutGameInput | Prisma.TapCreateOrConnectWithoutGameInput[]
  createMany?: Prisma.TapCreateManyGameInputEnvelope
  connect?: Prisma.TapWhereUniqueInput | Prisma.TapWhereUniqueInput[]
}

export type TapUncheckedCreateNestedManyWithoutGameInput = {
  create?: Prisma.XOR<Prisma.TapCreateWithoutGameInput, Prisma.TapUncheckedCreateWithoutGameInput> | Prisma.TapCreateWithoutGameInput[] | Prisma.TapUncheckedCreateWithoutGameInput[]
  connectOrCreate?: Prisma.TapCreateOrConnectWithoutGameInput | Prisma.TapCreateOrConnectWithoutGameInput[]
  createMany?: Prisma.TapCreateManyGameInputEnvelope
  connect?: Prisma.TapWhereUniqueInput | Prisma.TapWhereUniqueInput[]
}

export type TapUpdateManyWithoutGameNestedInput = {
  create?: Prisma.XOR<Prisma.TapCreateWithoutGameInput, Prisma.TapUncheckedCreateWithoutGameInput> | Prisma.TapCreateWithoutGameInput[] | Prisma.TapUncheckedCreateWithoutGameInput[]
  connectOrCreate?: Prisma.TapCreateOrConnectWithoutGameInput | Prisma.TapCreateOrConnectWithoutGameInput[]
  upsert?: Prisma.TapUpsertWithWhereUniqueWithoutGameInput | Prisma.TapUpsertWithWhereUniqueWithoutGameInput[]
  createMany?: Prisma.TapCreateManyGameInputEnvelope
  set?: Prisma.TapWhereUniqueInput | Prisma.TapWhereUniqueInput[]
  disconnect?: Prisma.TapWhereUniqueInput | Prisma.TapWhereUniqueInput[]
  delete?: Prisma.TapWhereUniqueInput | Prisma.TapWhereUniqueInput[]
  connect?: Prisma.TapWhereUniqueInput | Prisma.TapWhereUniqueInput[]
  update?: Prisma.TapUpdateWithWhereUniqueWithoutGameInput | Prisma.TapUpdateWithWhereUniqueWithoutGameInput[]
  updateMany?: Prisma.TapUpdateManyWithWhereWithoutGameInput | Prisma.TapUpdateManyWithWhereWithoutGameInput[]
  deleteMany?: Prisma.TapScalarWhereInput | Prisma.TapScalarWhereInput[]
}

export type TapUncheckedUpdateManyWithoutGameNestedInput = {
  create?: Prisma.XOR<Prisma.TapCreateWithoutGameInput, Prisma.TapUncheckedCreateWithoutGameInput> | Prisma.TapCreateWithoutGameInput[] | Prisma.TapUncheckedCreateWithoutGameInput[]
  connectOrCreate?: Prisma.TapCreateOrConnectWithoutGameInput | Prisma.TapCreateOrConnectWithoutGameInput[]
  upsert?: Prisma.TapUpsertWithWhereUniqueWithoutGameInput | Prisma.TapUpsertWithWhereUniqueWithoutGameInput[]
  createMany?: Prisma.TapCreateManyGameInputEnvelope
  set?: Prisma.TapWhereUniqueInput | Prisma.TapWhereUniqueInput[]
  disconnect?: Prisma.TapWhereUniqueInput | Prisma.TapWhereUniqueInput[]
  delete?: Prisma.TapWhereUniqueInput | Prisma.TapWhereUniqueInput[]
  connect?: Prisma.TapWhereUniqueInput | Prisma.TapWhereUniqueInput[]
  update?: Prisma.TapUpdateWithWhereUniqueWithoutGameInput | Prisma.TapUpdateWithWhereUniqueWithoutGameInput[]
  updateMany?: Prisma.TapUpdateManyWithWhereWithoutGameInput | Prisma.TapUpdateManyWithWhereWithoutGameInput[]
  deleteMany?: Prisma.TapScalarWhereInput | Prisma.TapScalarWhereInput[]
}

export type TapCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.TapCreateWithoutUserInput, Prisma.TapUncheckedCreateWithoutUserInput> | Prisma.TapCreateWithoutUserInput[] | Prisma.TapUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.TapCreateOrConnectWithoutUserInput | Prisma.TapCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.TapCreateManyUserInputEnvelope
  connect?: Prisma.TapWhereUniqueInput | Prisma.TapWhereUniqueInput[]
}

export type TapUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.TapCreateWithoutUserInput, Prisma.TapUncheckedCreateWithoutUserInput> | Prisma.TapCreateWithoutUserInput[] | Prisma.TapUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.TapCreateOrConnectWithoutUserInput | Prisma.TapCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.TapCreateManyUserInputEnvelope
  connect?: Prisma.TapWhereUniqueInput | Prisma.TapWhereUniqueInput[]
}

export type TapUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.TapCreateWithoutUserInput, Prisma.TapUncheckedCreateWithoutUserInput> | Prisma.TapCreateWithoutUserInput[] | Prisma.TapUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.TapCreateOrConnectWithoutUserInput | Prisma.TapCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.TapUpsertWithWhereUniqueWithoutUserInput | Prisma.TapUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.TapCreateManyUserInputEnvelope
  set?: Prisma.TapWhereUniqueInput | Prisma.TapWhereUniqueInput[]
  disconnect?: Prisma.TapWhereUniqueInput | Prisma.TapWhereUniqueInput[]
  delete?: Prisma.TapWhereUniqueInput | Prisma.TapWhereUniqueInput[]
  connect?: Prisma.TapWhereUniqueInput | Prisma.TapWhereUniqueInput[]
  update?: Prisma.TapUpdateWithWhereUniqueWithoutUserInput | Prisma.TapUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.TapUpdateManyWithWhereWithoutUserInput | Prisma.TapUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.TapScalarWhereInput | Prisma.TapScalarWhereInput[]
}

export type TapUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.TapCreateWithoutUserInput, Prisma.TapUncheckedCreateWithoutUserInput> | Prisma.TapCreateWithoutUserInput[] | Prisma.TapUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.TapCreateOrConnectWithoutUserInput | Prisma.TapCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.TapUpsertWithWhereUniqueWithoutUserInput | Prisma.TapUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.TapCreateManyUserInputEnvelope
  set?: Prisma.TapWhereUniqueInput | Prisma.TapWhereUniqueInput[]
  disconnect?: Prisma.TapWhereUniqueInput | Prisma.TapWhereUniqueInput[]
  delete?: Prisma.TapWhereUniqueInput | Prisma.TapWhereUniqueInput[]
  connect?: Prisma.TapWhereUniqueInput | Prisma.TapWhereUniqueInput[]
  update?: Prisma.TapUpdateWithWhereUniqueWithoutUserInput | Prisma.TapUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.TapUpdateManyWithWhereWithoutUserInput | Prisma.TapUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.TapScalarWhereInput | Prisma.TapScalarWhereInput[]
}

export type TapCreateWithoutGameInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutTapsInput
}

export type TapUncheckedCreateWithoutGameInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
}

export type TapCreateOrConnectWithoutGameInput = {
  where: Prisma.TapWhereUniqueInput
  create: Prisma.XOR<Prisma.TapCreateWithoutGameInput, Prisma.TapUncheckedCreateWithoutGameInput>
}

export type TapCreateManyGameInputEnvelope = {
  data: Prisma.TapCreateManyGameInput | Prisma.TapCreateManyGameInput[]
  skipDuplicates?: boolean
}

export type TapUpsertWithWhereUniqueWithoutGameInput = {
  where: Prisma.TapWhereUniqueInput
  update: Prisma.XOR<Prisma.TapUpdateWithoutGameInput, Prisma.TapUncheckedUpdateWithoutGameInput>
  create: Prisma.XOR<Prisma.TapCreateWithoutGameInput, Prisma.TapUncheckedCreateWithoutGameInput>
}

export type TapUpdateWithWhereUniqueWithoutGameInput = {
  where: Prisma.TapWhereUniqueInput
  data: Prisma.XOR<Prisma.TapUpdateWithoutGameInput, Prisma.TapUncheckedUpdateWithoutGameInput>
}

export type TapUpdateManyWithWhereWithoutGameInput = {
  where: Prisma.TapScalarWhereInput
  data: Prisma.XOR<Prisma.TapUpdateManyMutationInput, Prisma.TapUncheckedUpdateManyWithoutGameInput>
}

export type TapScalarWhereInput = {
  AND?: Prisma.TapScalarWhereInput | Prisma.TapScalarWhereInput[]
  OR?: Prisma.TapScalarWhereInput[]
  NOT?: Prisma.TapScalarWhereInput | Prisma.TapScalarWhereInput[]
  id?: Prisma.StringFilter<"Tap"> | string
  createdAt?: Prisma.DateTimeFilter<"Tap"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Tap"> | Date | string
  userId?: Prisma.StringFilter<"Tap"> | string
  gameId?: Prisma.StringFilter<"Tap"> | string
}

export type TapCreateWithoutUserInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  game: Prisma.GameCreateNestedOneWithoutTapsInput
}

export type TapUncheckedCreateWithoutUserInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  gameId: string
}

export type TapCreateOrConnectWithoutUserInput = {
  where: Prisma.TapWhereUniqueInput
  create: Prisma.XOR<Prisma.TapCreateWithoutUserInput, Prisma.TapUncheckedCreateWithoutUserInput>
}

export type TapCreateManyUserInputEnvelope = {
  data: Prisma.TapCreateManyUserInput | Prisma.TapCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type TapUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.TapWhereUniqueInput
  update: Prisma.XOR<Prisma.TapUpdateWithoutUserInput, Prisma.TapUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.TapCreateWithoutUserInput, Prisma.TapUncheckedCreateWithoutUserInput>
}

export type TapUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.TapWhereUniqueInput
  data: Prisma.XOR<Prisma.TapUpdateWithoutUserInput, Prisma.TapUncheckedUpdateWithoutUserInput>
}

export type TapUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.TapScalarWhereInput
  data: Prisma.XOR<Prisma.TapUpdateManyMutationInput, Prisma.TapUncheckedUpdateManyWithoutUserInput>
}

export type TapCreateManyGameInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
}

export type TapUpdateWithoutGameInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutTapsNestedInput
}

export type TapUncheckedUpdateWithoutGameInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TapUncheckedUpdateManyWithoutGameInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TapCreateManyUserInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  gameId: string
}

export type TapUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  game?: Prisma.GameUpdateOneRequiredWithoutTapsNestedInput
}

export type TapUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  gameId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TapUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  gameId?: Prisma.StringFieldUpdateOperationsInput | string
}



export type TapSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  gameId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tap"]>

export type TapSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  gameId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tap"]>

export type TapSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  gameId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
}, ExtArgs["result"]["tap"]>

export type TapSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  gameId?: boolean
}

export type TapOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "userId" | "gameId", ExtArgs["result"]["tap"]>
export type TapInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
}
export type TapIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
}
export type TapIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  game?: boolean | Prisma.GameDefaultArgs<ExtArgs>
}

export type $TapPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Tap"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    game: Prisma.$GamePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    createdAt: Date
    updatedAt: Date
    userId: string
    gameId: string
  }, ExtArgs["result"]["tap"]>
  composites: {}
}

export type TapGetPayload<S extends boolean | null | undefined | TapDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TapPayload, S>

export type TapCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TapFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TapCountAggregateInputType | true
  }

export interface TapDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tap'], meta: { name: 'Tap' } }
  /**
   * Find zero or one Tap that matches the filter.
   * @param {TapFindUniqueArgs} args - Arguments to find a Tap
   * @example
   * // Get one Tap
   * const tap = await prisma.tap.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TapFindUniqueArgs>(args: Prisma.SelectSubset<T, TapFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TapClient<runtime.Types.Result.GetResult<Prisma.$TapPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Tap that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TapFindUniqueOrThrowArgs} args - Arguments to find a Tap
   * @example
   * // Get one Tap
   * const tap = await prisma.tap.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TapFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TapFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TapClient<runtime.Types.Result.GetResult<Prisma.$TapPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Tap that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TapFindFirstArgs} args - Arguments to find a Tap
   * @example
   * // Get one Tap
   * const tap = await prisma.tap.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TapFindFirstArgs>(args?: Prisma.SelectSubset<T, TapFindFirstArgs<ExtArgs>>): Prisma.Prisma__TapClient<runtime.Types.Result.GetResult<Prisma.$TapPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Tap that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TapFindFirstOrThrowArgs} args - Arguments to find a Tap
   * @example
   * // Get one Tap
   * const tap = await prisma.tap.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TapFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TapFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TapClient<runtime.Types.Result.GetResult<Prisma.$TapPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Taps that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TapFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Taps
   * const taps = await prisma.tap.findMany()
   * 
   * // Get first 10 Taps
   * const taps = await prisma.tap.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const tapWithIdOnly = await prisma.tap.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TapFindManyArgs>(args?: Prisma.SelectSubset<T, TapFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TapPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Tap.
   * @param {TapCreateArgs} args - Arguments to create a Tap.
   * @example
   * // Create one Tap
   * const Tap = await prisma.tap.create({
   *   data: {
   *     // ... data to create a Tap
   *   }
   * })
   * 
   */
  create<T extends TapCreateArgs>(args: Prisma.SelectSubset<T, TapCreateArgs<ExtArgs>>): Prisma.Prisma__TapClient<runtime.Types.Result.GetResult<Prisma.$TapPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Taps.
   * @param {TapCreateManyArgs} args - Arguments to create many Taps.
   * @example
   * // Create many Taps
   * const tap = await prisma.tap.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TapCreateManyArgs>(args?: Prisma.SelectSubset<T, TapCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Taps and returns the data saved in the database.
   * @param {TapCreateManyAndReturnArgs} args - Arguments to create many Taps.
   * @example
   * // Create many Taps
   * const tap = await prisma.tap.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Taps and only return the `id`
   * const tapWithIdOnly = await prisma.tap.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TapCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TapCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TapPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Tap.
   * @param {TapDeleteArgs} args - Arguments to delete one Tap.
   * @example
   * // Delete one Tap
   * const Tap = await prisma.tap.delete({
   *   where: {
   *     // ... filter to delete one Tap
   *   }
   * })
   * 
   */
  delete<T extends TapDeleteArgs>(args: Prisma.SelectSubset<T, TapDeleteArgs<ExtArgs>>): Prisma.Prisma__TapClient<runtime.Types.Result.GetResult<Prisma.$TapPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Tap.
   * @param {TapUpdateArgs} args - Arguments to update one Tap.
   * @example
   * // Update one Tap
   * const tap = await prisma.tap.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TapUpdateArgs>(args: Prisma.SelectSubset<T, TapUpdateArgs<ExtArgs>>): Prisma.Prisma__TapClient<runtime.Types.Result.GetResult<Prisma.$TapPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Taps.
   * @param {TapDeleteManyArgs} args - Arguments to filter Taps to delete.
   * @example
   * // Delete a few Taps
   * const { count } = await prisma.tap.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TapDeleteManyArgs>(args?: Prisma.SelectSubset<T, TapDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Taps.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TapUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Taps
   * const tap = await prisma.tap.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TapUpdateManyArgs>(args: Prisma.SelectSubset<T, TapUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Taps and returns the data updated in the database.
   * @param {TapUpdateManyAndReturnArgs} args - Arguments to update many Taps.
   * @example
   * // Update many Taps
   * const tap = await prisma.tap.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Taps and only return the `id`
   * const tapWithIdOnly = await prisma.tap.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TapUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TapUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TapPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Tap.
   * @param {TapUpsertArgs} args - Arguments to update or create a Tap.
   * @example
   * // Update or create a Tap
   * const tap = await prisma.tap.upsert({
   *   create: {
   *     // ... data to create a Tap
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Tap we want to update
   *   }
   * })
   */
  upsert<T extends TapUpsertArgs>(args: Prisma.SelectSubset<T, TapUpsertArgs<ExtArgs>>): Prisma.Prisma__TapClient<runtime.Types.Result.GetResult<Prisma.$TapPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Taps.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TapCountArgs} args - Arguments to filter Taps to count.
   * @example
   * // Count the number of Taps
   * const count = await prisma.tap.count({
   *   where: {
   *     // ... the filter for the Taps we want to count
   *   }
   * })
  **/
  count<T extends TapCountArgs>(
    args?: Prisma.Subset<T, TapCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TapCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Tap.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TapAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TapAggregateArgs>(args: Prisma.Subset<T, TapAggregateArgs>): Prisma.PrismaPromise<GetTapAggregateType<T>>

  /**
   * Group by Tap.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TapGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TapGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TapGroupByArgs['orderBy'] }
      : { orderBy?: TapGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TapGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTapGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Tap model
 */
readonly fields: TapFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Tap.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TapClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  game<T extends Prisma.GameDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.GameDefaultArgs<ExtArgs>>): Prisma.Prisma__GameClient<runtime.Types.Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Tap model
 */
export interface TapFieldRefs {
  readonly id: Prisma.FieldRef<"Tap", 'String'>
  readonly createdAt: Prisma.FieldRef<"Tap", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Tap", 'DateTime'>
  readonly userId: Prisma.FieldRef<"Tap", 'String'>
  readonly gameId: Prisma.FieldRef<"Tap", 'String'>
}
    

// Custom InputTypes
/**
 * Tap findUnique
 */
export type TapFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tap
   */
  select?: Prisma.TapSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tap
   */
  omit?: Prisma.TapOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TapInclude<ExtArgs> | null
  /**
   * Filter, which Tap to fetch.
   */
  where: Prisma.TapWhereUniqueInput
}

/**
 * Tap findUniqueOrThrow
 */
export type TapFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tap
   */
  select?: Prisma.TapSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tap
   */
  omit?: Prisma.TapOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TapInclude<ExtArgs> | null
  /**
   * Filter, which Tap to fetch.
   */
  where: Prisma.TapWhereUniqueInput
}

/**
 * Tap findFirst
 */
export type TapFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tap
   */
  select?: Prisma.TapSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tap
   */
  omit?: Prisma.TapOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TapInclude<ExtArgs> | null
  /**
   * Filter, which Tap to fetch.
   */
  where?: Prisma.TapWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Taps to fetch.
   */
  orderBy?: Prisma.TapOrderByWithRelationInput | Prisma.TapOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Taps.
   */
  cursor?: Prisma.TapWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Taps from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Taps.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Taps.
   */
  distinct?: Prisma.TapScalarFieldEnum | Prisma.TapScalarFieldEnum[]
}

/**
 * Tap findFirstOrThrow
 */
export type TapFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tap
   */
  select?: Prisma.TapSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tap
   */
  omit?: Prisma.TapOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TapInclude<ExtArgs> | null
  /**
   * Filter, which Tap to fetch.
   */
  where?: Prisma.TapWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Taps to fetch.
   */
  orderBy?: Prisma.TapOrderByWithRelationInput | Prisma.TapOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Taps.
   */
  cursor?: Prisma.TapWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Taps from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Taps.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Taps.
   */
  distinct?: Prisma.TapScalarFieldEnum | Prisma.TapScalarFieldEnum[]
}

/**
 * Tap findMany
 */
export type TapFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tap
   */
  select?: Prisma.TapSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tap
   */
  omit?: Prisma.TapOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TapInclude<ExtArgs> | null
  /**
   * Filter, which Taps to fetch.
   */
  where?: Prisma.TapWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Taps to fetch.
   */
  orderBy?: Prisma.TapOrderByWithRelationInput | Prisma.TapOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Taps.
   */
  cursor?: Prisma.TapWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Taps from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Taps.
   */
  skip?: number
  distinct?: Prisma.TapScalarFieldEnum | Prisma.TapScalarFieldEnum[]
}

/**
 * Tap create
 */
export type TapCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tap
   */
  select?: Prisma.TapSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tap
   */
  omit?: Prisma.TapOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TapInclude<ExtArgs> | null
  /**
   * The data needed to create a Tap.
   */
  data: Prisma.XOR<Prisma.TapCreateInput, Prisma.TapUncheckedCreateInput>
}

/**
 * Tap createMany
 */
export type TapCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Taps.
   */
  data: Prisma.TapCreateManyInput | Prisma.TapCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Tap createManyAndReturn
 */
export type TapCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tap
   */
  select?: Prisma.TapSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Tap
   */
  omit?: Prisma.TapOmit<ExtArgs> | null
  /**
   * The data used to create many Taps.
   */
  data: Prisma.TapCreateManyInput | Prisma.TapCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TapIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Tap update
 */
export type TapUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tap
   */
  select?: Prisma.TapSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tap
   */
  omit?: Prisma.TapOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TapInclude<ExtArgs> | null
  /**
   * The data needed to update a Tap.
   */
  data: Prisma.XOR<Prisma.TapUpdateInput, Prisma.TapUncheckedUpdateInput>
  /**
   * Choose, which Tap to update.
   */
  where: Prisma.TapWhereUniqueInput
}

/**
 * Tap updateMany
 */
export type TapUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Taps.
   */
  data: Prisma.XOR<Prisma.TapUpdateManyMutationInput, Prisma.TapUncheckedUpdateManyInput>
  /**
   * Filter which Taps to update
   */
  where?: Prisma.TapWhereInput
  /**
   * Limit how many Taps to update.
   */
  limit?: number
}

/**
 * Tap updateManyAndReturn
 */
export type TapUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tap
   */
  select?: Prisma.TapSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Tap
   */
  omit?: Prisma.TapOmit<ExtArgs> | null
  /**
   * The data used to update Taps.
   */
  data: Prisma.XOR<Prisma.TapUpdateManyMutationInput, Prisma.TapUncheckedUpdateManyInput>
  /**
   * Filter which Taps to update
   */
  where?: Prisma.TapWhereInput
  /**
   * Limit how many Taps to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TapIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Tap upsert
 */
export type TapUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tap
   */
  select?: Prisma.TapSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tap
   */
  omit?: Prisma.TapOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TapInclude<ExtArgs> | null
  /**
   * The filter to search for the Tap to update in case it exists.
   */
  where: Prisma.TapWhereUniqueInput
  /**
   * In case the Tap found by the `where` argument doesn't exist, create a new Tap with this data.
   */
  create: Prisma.XOR<Prisma.TapCreateInput, Prisma.TapUncheckedCreateInput>
  /**
   * In case the Tap was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TapUpdateInput, Prisma.TapUncheckedUpdateInput>
}

/**
 * Tap delete
 */
export type TapDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tap
   */
  select?: Prisma.TapSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tap
   */
  omit?: Prisma.TapOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TapInclude<ExtArgs> | null
  /**
   * Filter which Tap to delete.
   */
  where: Prisma.TapWhereUniqueInput
}

/**
 * Tap deleteMany
 */
export type TapDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Taps to delete
   */
  where?: Prisma.TapWhereInput
  /**
   * Limit how many Taps to delete.
   */
  limit?: number
}

/**
 * Tap without action
 */
export type TapDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Tap
   */
  select?: Prisma.TapSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Tap
   */
  omit?: Prisma.TapOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TapInclude<ExtArgs> | null
}
