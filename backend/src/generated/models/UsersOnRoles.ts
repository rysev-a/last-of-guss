
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `UsersOnRoles` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model UsersOnRoles
 * 
 */
export type UsersOnRolesModel = runtime.Types.Result.DefaultSelection<Prisma.$UsersOnRolesPayload>

export type AggregateUsersOnRoles = {
  _count: UsersOnRolesCountAggregateOutputType | null
  _min: UsersOnRolesMinAggregateOutputType | null
  _max: UsersOnRolesMaxAggregateOutputType | null
}

export type UsersOnRolesMinAggregateOutputType = {
  userId: string | null
  roleId: string | null
  assignedAt: Date | null
}

export type UsersOnRolesMaxAggregateOutputType = {
  userId: string | null
  roleId: string | null
  assignedAt: Date | null
}

export type UsersOnRolesCountAggregateOutputType = {
  userId: number
  roleId: number
  assignedAt: number
  _all: number
}


export type UsersOnRolesMinAggregateInputType = {
  userId?: true
  roleId?: true
  assignedAt?: true
}

export type UsersOnRolesMaxAggregateInputType = {
  userId?: true
  roleId?: true
  assignedAt?: true
}

export type UsersOnRolesCountAggregateInputType = {
  userId?: true
  roleId?: true
  assignedAt?: true
  _all?: true
}

export type UsersOnRolesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UsersOnRoles to aggregate.
   */
  where?: Prisma.UsersOnRolesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UsersOnRoles to fetch.
   */
  orderBy?: Prisma.UsersOnRolesOrderByWithRelationInput | Prisma.UsersOnRolesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UsersOnRolesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UsersOnRoles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UsersOnRoles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UsersOnRoles
  **/
  _count?: true | UsersOnRolesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UsersOnRolesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UsersOnRolesMaxAggregateInputType
}

export type GetUsersOnRolesAggregateType<T extends UsersOnRolesAggregateArgs> = {
      [P in keyof T & keyof AggregateUsersOnRoles]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUsersOnRoles[P]>
    : Prisma.GetScalarType<T[P], AggregateUsersOnRoles[P]>
}




export type UsersOnRolesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UsersOnRolesWhereInput
  orderBy?: Prisma.UsersOnRolesOrderByWithAggregationInput | Prisma.UsersOnRolesOrderByWithAggregationInput[]
  by: Prisma.UsersOnRolesScalarFieldEnum[] | Prisma.UsersOnRolesScalarFieldEnum
  having?: Prisma.UsersOnRolesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UsersOnRolesCountAggregateInputType | true
  _min?: UsersOnRolesMinAggregateInputType
  _max?: UsersOnRolesMaxAggregateInputType
}

export type UsersOnRolesGroupByOutputType = {
  userId: string
  roleId: string
  assignedAt: Date
  _count: UsersOnRolesCountAggregateOutputType | null
  _min: UsersOnRolesMinAggregateOutputType | null
  _max: UsersOnRolesMaxAggregateOutputType | null
}

type GetUsersOnRolesGroupByPayload<T extends UsersOnRolesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UsersOnRolesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UsersOnRolesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UsersOnRolesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UsersOnRolesGroupByOutputType[P]>
      }
    >
  > 



export type UsersOnRolesWhereInput = {
  AND?: Prisma.UsersOnRolesWhereInput | Prisma.UsersOnRolesWhereInput[]
  OR?: Prisma.UsersOnRolesWhereInput[]
  NOT?: Prisma.UsersOnRolesWhereInput | Prisma.UsersOnRolesWhereInput[]
  userId?: Prisma.StringFilter<"UsersOnRoles"> | string
  roleId?: Prisma.StringFilter<"UsersOnRoles"> | string
  assignedAt?: Prisma.DateTimeFilter<"UsersOnRoles"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  role?: Prisma.XOR<Prisma.RoleScalarRelationFilter, Prisma.RoleWhereInput>
}

export type UsersOnRolesOrderByWithRelationInput = {
  userId?: Prisma.SortOrder
  roleId?: Prisma.SortOrder
  assignedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  role?: Prisma.RoleOrderByWithRelationInput
}

export type UsersOnRolesWhereUniqueInput = Prisma.AtLeast<{
  userId_roleId?: Prisma.UsersOnRolesUserIdRoleIdCompoundUniqueInput
  AND?: Prisma.UsersOnRolesWhereInput | Prisma.UsersOnRolesWhereInput[]
  OR?: Prisma.UsersOnRolesWhereInput[]
  NOT?: Prisma.UsersOnRolesWhereInput | Prisma.UsersOnRolesWhereInput[]
  userId?: Prisma.StringFilter<"UsersOnRoles"> | string
  roleId?: Prisma.StringFilter<"UsersOnRoles"> | string
  assignedAt?: Prisma.DateTimeFilter<"UsersOnRoles"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  role?: Prisma.XOR<Prisma.RoleScalarRelationFilter, Prisma.RoleWhereInput>
}, "userId_roleId">

export type UsersOnRolesOrderByWithAggregationInput = {
  userId?: Prisma.SortOrder
  roleId?: Prisma.SortOrder
  assignedAt?: Prisma.SortOrder
  _count?: Prisma.UsersOnRolesCountOrderByAggregateInput
  _max?: Prisma.UsersOnRolesMaxOrderByAggregateInput
  _min?: Prisma.UsersOnRolesMinOrderByAggregateInput
}

export type UsersOnRolesScalarWhereWithAggregatesInput = {
  AND?: Prisma.UsersOnRolesScalarWhereWithAggregatesInput | Prisma.UsersOnRolesScalarWhereWithAggregatesInput[]
  OR?: Prisma.UsersOnRolesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UsersOnRolesScalarWhereWithAggregatesInput | Prisma.UsersOnRolesScalarWhereWithAggregatesInput[]
  userId?: Prisma.StringWithAggregatesFilter<"UsersOnRoles"> | string
  roleId?: Prisma.StringWithAggregatesFilter<"UsersOnRoles"> | string
  assignedAt?: Prisma.DateTimeWithAggregatesFilter<"UsersOnRoles"> | Date | string
}

export type UsersOnRolesCreateInput = {
  assignedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutRolesInput
  role: Prisma.RoleCreateNestedOneWithoutUsersInput
}

export type UsersOnRolesUncheckedCreateInput = {
  userId: string
  roleId: string
  assignedAt?: Date | string
}

export type UsersOnRolesUpdateInput = {
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutRolesNestedInput
  role?: Prisma.RoleUpdateOneRequiredWithoutUsersNestedInput
}

export type UsersOnRolesUncheckedUpdateInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  roleId?: Prisma.StringFieldUpdateOperationsInput | string
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UsersOnRolesCreateManyInput = {
  userId: string
  roleId: string
  assignedAt?: Date | string
}

export type UsersOnRolesUpdateManyMutationInput = {
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UsersOnRolesUncheckedUpdateManyInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  roleId?: Prisma.StringFieldUpdateOperationsInput | string
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UsersOnRolesListRelationFilter = {
  every?: Prisma.UsersOnRolesWhereInput
  some?: Prisma.UsersOnRolesWhereInput
  none?: Prisma.UsersOnRolesWhereInput
}

export type UsersOnRolesOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type UsersOnRolesUserIdRoleIdCompoundUniqueInput = {
  userId: string
  roleId: string
}

export type UsersOnRolesCountOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  roleId?: Prisma.SortOrder
  assignedAt?: Prisma.SortOrder
}

export type UsersOnRolesMaxOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  roleId?: Prisma.SortOrder
  assignedAt?: Prisma.SortOrder
}

export type UsersOnRolesMinOrderByAggregateInput = {
  userId?: Prisma.SortOrder
  roleId?: Prisma.SortOrder
  assignedAt?: Prisma.SortOrder
}

export type UsersOnRolesCreateNestedManyWithoutRoleInput = {
  create?: Prisma.XOR<Prisma.UsersOnRolesCreateWithoutRoleInput, Prisma.UsersOnRolesUncheckedCreateWithoutRoleInput> | Prisma.UsersOnRolesCreateWithoutRoleInput[] | Prisma.UsersOnRolesUncheckedCreateWithoutRoleInput[]
  connectOrCreate?: Prisma.UsersOnRolesCreateOrConnectWithoutRoleInput | Prisma.UsersOnRolesCreateOrConnectWithoutRoleInput[]
  createMany?: Prisma.UsersOnRolesCreateManyRoleInputEnvelope
  connect?: Prisma.UsersOnRolesWhereUniqueInput | Prisma.UsersOnRolesWhereUniqueInput[]
}

export type UsersOnRolesUncheckedCreateNestedManyWithoutRoleInput = {
  create?: Prisma.XOR<Prisma.UsersOnRolesCreateWithoutRoleInput, Prisma.UsersOnRolesUncheckedCreateWithoutRoleInput> | Prisma.UsersOnRolesCreateWithoutRoleInput[] | Prisma.UsersOnRolesUncheckedCreateWithoutRoleInput[]
  connectOrCreate?: Prisma.UsersOnRolesCreateOrConnectWithoutRoleInput | Prisma.UsersOnRolesCreateOrConnectWithoutRoleInput[]
  createMany?: Prisma.UsersOnRolesCreateManyRoleInputEnvelope
  connect?: Prisma.UsersOnRolesWhereUniqueInput | Prisma.UsersOnRolesWhereUniqueInput[]
}

export type UsersOnRolesUpdateManyWithoutRoleNestedInput = {
  create?: Prisma.XOR<Prisma.UsersOnRolesCreateWithoutRoleInput, Prisma.UsersOnRolesUncheckedCreateWithoutRoleInput> | Prisma.UsersOnRolesCreateWithoutRoleInput[] | Prisma.UsersOnRolesUncheckedCreateWithoutRoleInput[]
  connectOrCreate?: Prisma.UsersOnRolesCreateOrConnectWithoutRoleInput | Prisma.UsersOnRolesCreateOrConnectWithoutRoleInput[]
  upsert?: Prisma.UsersOnRolesUpsertWithWhereUniqueWithoutRoleInput | Prisma.UsersOnRolesUpsertWithWhereUniqueWithoutRoleInput[]
  createMany?: Prisma.UsersOnRolesCreateManyRoleInputEnvelope
  set?: Prisma.UsersOnRolesWhereUniqueInput | Prisma.UsersOnRolesWhereUniqueInput[]
  disconnect?: Prisma.UsersOnRolesWhereUniqueInput | Prisma.UsersOnRolesWhereUniqueInput[]
  delete?: Prisma.UsersOnRolesWhereUniqueInput | Prisma.UsersOnRolesWhereUniqueInput[]
  connect?: Prisma.UsersOnRolesWhereUniqueInput | Prisma.UsersOnRolesWhereUniqueInput[]
  update?: Prisma.UsersOnRolesUpdateWithWhereUniqueWithoutRoleInput | Prisma.UsersOnRolesUpdateWithWhereUniqueWithoutRoleInput[]
  updateMany?: Prisma.UsersOnRolesUpdateManyWithWhereWithoutRoleInput | Prisma.UsersOnRolesUpdateManyWithWhereWithoutRoleInput[]
  deleteMany?: Prisma.UsersOnRolesScalarWhereInput | Prisma.UsersOnRolesScalarWhereInput[]
}

export type UsersOnRolesUncheckedUpdateManyWithoutRoleNestedInput = {
  create?: Prisma.XOR<Prisma.UsersOnRolesCreateWithoutRoleInput, Prisma.UsersOnRolesUncheckedCreateWithoutRoleInput> | Prisma.UsersOnRolesCreateWithoutRoleInput[] | Prisma.UsersOnRolesUncheckedCreateWithoutRoleInput[]
  connectOrCreate?: Prisma.UsersOnRolesCreateOrConnectWithoutRoleInput | Prisma.UsersOnRolesCreateOrConnectWithoutRoleInput[]
  upsert?: Prisma.UsersOnRolesUpsertWithWhereUniqueWithoutRoleInput | Prisma.UsersOnRolesUpsertWithWhereUniqueWithoutRoleInput[]
  createMany?: Prisma.UsersOnRolesCreateManyRoleInputEnvelope
  set?: Prisma.UsersOnRolesWhereUniqueInput | Prisma.UsersOnRolesWhereUniqueInput[]
  disconnect?: Prisma.UsersOnRolesWhereUniqueInput | Prisma.UsersOnRolesWhereUniqueInput[]
  delete?: Prisma.UsersOnRolesWhereUniqueInput | Prisma.UsersOnRolesWhereUniqueInput[]
  connect?: Prisma.UsersOnRolesWhereUniqueInput | Prisma.UsersOnRolesWhereUniqueInput[]
  update?: Prisma.UsersOnRolesUpdateWithWhereUniqueWithoutRoleInput | Prisma.UsersOnRolesUpdateWithWhereUniqueWithoutRoleInput[]
  updateMany?: Prisma.UsersOnRolesUpdateManyWithWhereWithoutRoleInput | Prisma.UsersOnRolesUpdateManyWithWhereWithoutRoleInput[]
  deleteMany?: Prisma.UsersOnRolesScalarWhereInput | Prisma.UsersOnRolesScalarWhereInput[]
}

export type UsersOnRolesCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UsersOnRolesCreateWithoutUserInput, Prisma.UsersOnRolesUncheckedCreateWithoutUserInput> | Prisma.UsersOnRolesCreateWithoutUserInput[] | Prisma.UsersOnRolesUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UsersOnRolesCreateOrConnectWithoutUserInput | Prisma.UsersOnRolesCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UsersOnRolesCreateManyUserInputEnvelope
  connect?: Prisma.UsersOnRolesWhereUniqueInput | Prisma.UsersOnRolesWhereUniqueInput[]
}

export type UsersOnRolesUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UsersOnRolesCreateWithoutUserInput, Prisma.UsersOnRolesUncheckedCreateWithoutUserInput> | Prisma.UsersOnRolesCreateWithoutUserInput[] | Prisma.UsersOnRolesUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UsersOnRolesCreateOrConnectWithoutUserInput | Prisma.UsersOnRolesCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UsersOnRolesCreateManyUserInputEnvelope
  connect?: Prisma.UsersOnRolesWhereUniqueInput | Prisma.UsersOnRolesWhereUniqueInput[]
}

export type UsersOnRolesUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UsersOnRolesCreateWithoutUserInput, Prisma.UsersOnRolesUncheckedCreateWithoutUserInput> | Prisma.UsersOnRolesCreateWithoutUserInput[] | Prisma.UsersOnRolesUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UsersOnRolesCreateOrConnectWithoutUserInput | Prisma.UsersOnRolesCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UsersOnRolesUpsertWithWhereUniqueWithoutUserInput | Prisma.UsersOnRolesUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UsersOnRolesCreateManyUserInputEnvelope
  set?: Prisma.UsersOnRolesWhereUniqueInput | Prisma.UsersOnRolesWhereUniqueInput[]
  disconnect?: Prisma.UsersOnRolesWhereUniqueInput | Prisma.UsersOnRolesWhereUniqueInput[]
  delete?: Prisma.UsersOnRolesWhereUniqueInput | Prisma.UsersOnRolesWhereUniqueInput[]
  connect?: Prisma.UsersOnRolesWhereUniqueInput | Prisma.UsersOnRolesWhereUniqueInput[]
  update?: Prisma.UsersOnRolesUpdateWithWhereUniqueWithoutUserInput | Prisma.UsersOnRolesUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UsersOnRolesUpdateManyWithWhereWithoutUserInput | Prisma.UsersOnRolesUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UsersOnRolesScalarWhereInput | Prisma.UsersOnRolesScalarWhereInput[]
}

export type UsersOnRolesUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UsersOnRolesCreateWithoutUserInput, Prisma.UsersOnRolesUncheckedCreateWithoutUserInput> | Prisma.UsersOnRolesCreateWithoutUserInput[] | Prisma.UsersOnRolesUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UsersOnRolesCreateOrConnectWithoutUserInput | Prisma.UsersOnRolesCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UsersOnRolesUpsertWithWhereUniqueWithoutUserInput | Prisma.UsersOnRolesUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UsersOnRolesCreateManyUserInputEnvelope
  set?: Prisma.UsersOnRolesWhereUniqueInput | Prisma.UsersOnRolesWhereUniqueInput[]
  disconnect?: Prisma.UsersOnRolesWhereUniqueInput | Prisma.UsersOnRolesWhereUniqueInput[]
  delete?: Prisma.UsersOnRolesWhereUniqueInput | Prisma.UsersOnRolesWhereUniqueInput[]
  connect?: Prisma.UsersOnRolesWhereUniqueInput | Prisma.UsersOnRolesWhereUniqueInput[]
  update?: Prisma.UsersOnRolesUpdateWithWhereUniqueWithoutUserInput | Prisma.UsersOnRolesUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UsersOnRolesUpdateManyWithWhereWithoutUserInput | Prisma.UsersOnRolesUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UsersOnRolesScalarWhereInput | Prisma.UsersOnRolesScalarWhereInput[]
}

export type UsersOnRolesCreateWithoutRoleInput = {
  assignedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutRolesInput
}

export type UsersOnRolesUncheckedCreateWithoutRoleInput = {
  userId: string
  assignedAt?: Date | string
}

export type UsersOnRolesCreateOrConnectWithoutRoleInput = {
  where: Prisma.UsersOnRolesWhereUniqueInput
  create: Prisma.XOR<Prisma.UsersOnRolesCreateWithoutRoleInput, Prisma.UsersOnRolesUncheckedCreateWithoutRoleInput>
}

export type UsersOnRolesCreateManyRoleInputEnvelope = {
  data: Prisma.UsersOnRolesCreateManyRoleInput | Prisma.UsersOnRolesCreateManyRoleInput[]
  skipDuplicates?: boolean
}

export type UsersOnRolesUpsertWithWhereUniqueWithoutRoleInput = {
  where: Prisma.UsersOnRolesWhereUniqueInput
  update: Prisma.XOR<Prisma.UsersOnRolesUpdateWithoutRoleInput, Prisma.UsersOnRolesUncheckedUpdateWithoutRoleInput>
  create: Prisma.XOR<Prisma.UsersOnRolesCreateWithoutRoleInput, Prisma.UsersOnRolesUncheckedCreateWithoutRoleInput>
}

export type UsersOnRolesUpdateWithWhereUniqueWithoutRoleInput = {
  where: Prisma.UsersOnRolesWhereUniqueInput
  data: Prisma.XOR<Prisma.UsersOnRolesUpdateWithoutRoleInput, Prisma.UsersOnRolesUncheckedUpdateWithoutRoleInput>
}

export type UsersOnRolesUpdateManyWithWhereWithoutRoleInput = {
  where: Prisma.UsersOnRolesScalarWhereInput
  data: Prisma.XOR<Prisma.UsersOnRolesUpdateManyMutationInput, Prisma.UsersOnRolesUncheckedUpdateManyWithoutRoleInput>
}

export type UsersOnRolesScalarWhereInput = {
  AND?: Prisma.UsersOnRolesScalarWhereInput | Prisma.UsersOnRolesScalarWhereInput[]
  OR?: Prisma.UsersOnRolesScalarWhereInput[]
  NOT?: Prisma.UsersOnRolesScalarWhereInput | Prisma.UsersOnRolesScalarWhereInput[]
  userId?: Prisma.StringFilter<"UsersOnRoles"> | string
  roleId?: Prisma.StringFilter<"UsersOnRoles"> | string
  assignedAt?: Prisma.DateTimeFilter<"UsersOnRoles"> | Date | string
}

export type UsersOnRolesCreateWithoutUserInput = {
  assignedAt?: Date | string
  role: Prisma.RoleCreateNestedOneWithoutUsersInput
}

export type UsersOnRolesUncheckedCreateWithoutUserInput = {
  roleId: string
  assignedAt?: Date | string
}

export type UsersOnRolesCreateOrConnectWithoutUserInput = {
  where: Prisma.UsersOnRolesWhereUniqueInput
  create: Prisma.XOR<Prisma.UsersOnRolesCreateWithoutUserInput, Prisma.UsersOnRolesUncheckedCreateWithoutUserInput>
}

export type UsersOnRolesCreateManyUserInputEnvelope = {
  data: Prisma.UsersOnRolesCreateManyUserInput | Prisma.UsersOnRolesCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type UsersOnRolesUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.UsersOnRolesWhereUniqueInput
  update: Prisma.XOR<Prisma.UsersOnRolesUpdateWithoutUserInput, Prisma.UsersOnRolesUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.UsersOnRolesCreateWithoutUserInput, Prisma.UsersOnRolesUncheckedCreateWithoutUserInput>
}

export type UsersOnRolesUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.UsersOnRolesWhereUniqueInput
  data: Prisma.XOR<Prisma.UsersOnRolesUpdateWithoutUserInput, Prisma.UsersOnRolesUncheckedUpdateWithoutUserInput>
}

export type UsersOnRolesUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.UsersOnRolesScalarWhereInput
  data: Prisma.XOR<Prisma.UsersOnRolesUpdateManyMutationInput, Prisma.UsersOnRolesUncheckedUpdateManyWithoutUserInput>
}

export type UsersOnRolesCreateManyRoleInput = {
  userId: string
  assignedAt?: Date | string
}

export type UsersOnRolesUpdateWithoutRoleInput = {
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutRolesNestedInput
}

export type UsersOnRolesUncheckedUpdateWithoutRoleInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UsersOnRolesUncheckedUpdateManyWithoutRoleInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UsersOnRolesCreateManyUserInput = {
  roleId: string
  assignedAt?: Date | string
}

export type UsersOnRolesUpdateWithoutUserInput = {
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.RoleUpdateOneRequiredWithoutUsersNestedInput
}

export type UsersOnRolesUncheckedUpdateWithoutUserInput = {
  roleId?: Prisma.StringFieldUpdateOperationsInput | string
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UsersOnRolesUncheckedUpdateManyWithoutUserInput = {
  roleId?: Prisma.StringFieldUpdateOperationsInput | string
  assignedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type UsersOnRolesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  roleId?: boolean
  assignedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  role?: boolean | Prisma.RoleDefaultArgs<ExtArgs>
}, ExtArgs["result"]["usersOnRoles"]>

export type UsersOnRolesSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  roleId?: boolean
  assignedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  role?: boolean | Prisma.RoleDefaultArgs<ExtArgs>
}, ExtArgs["result"]["usersOnRoles"]>

export type UsersOnRolesSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  userId?: boolean
  roleId?: boolean
  assignedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  role?: boolean | Prisma.RoleDefaultArgs<ExtArgs>
}, ExtArgs["result"]["usersOnRoles"]>

export type UsersOnRolesSelectScalar = {
  userId?: boolean
  roleId?: boolean
  assignedAt?: boolean
}

export type UsersOnRolesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"userId" | "roleId" | "assignedAt", ExtArgs["result"]["usersOnRoles"]>
export type UsersOnRolesInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  role?: boolean | Prisma.RoleDefaultArgs<ExtArgs>
}
export type UsersOnRolesIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  role?: boolean | Prisma.RoleDefaultArgs<ExtArgs>
}
export type UsersOnRolesIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  role?: boolean | Prisma.RoleDefaultArgs<ExtArgs>
}

export type $UsersOnRolesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UsersOnRoles"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    role: Prisma.$RolePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    userId: string
    roleId: string
    assignedAt: Date
  }, ExtArgs["result"]["usersOnRoles"]>
  composites: {}
}

export type UsersOnRolesGetPayload<S extends boolean | null | undefined | UsersOnRolesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UsersOnRolesPayload, S>

export type UsersOnRolesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UsersOnRolesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UsersOnRolesCountAggregateInputType | true
  }

export interface UsersOnRolesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UsersOnRoles'], meta: { name: 'UsersOnRoles' } }
  /**
   * Find zero or one UsersOnRoles that matches the filter.
   * @param {UsersOnRolesFindUniqueArgs} args - Arguments to find a UsersOnRoles
   * @example
   * // Get one UsersOnRoles
   * const usersOnRoles = await prisma.usersOnRoles.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UsersOnRolesFindUniqueArgs>(args: Prisma.SelectSubset<T, UsersOnRolesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UsersOnRolesClient<runtime.Types.Result.GetResult<Prisma.$UsersOnRolesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UsersOnRoles that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UsersOnRolesFindUniqueOrThrowArgs} args - Arguments to find a UsersOnRoles
   * @example
   * // Get one UsersOnRoles
   * const usersOnRoles = await prisma.usersOnRoles.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UsersOnRolesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UsersOnRolesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UsersOnRolesClient<runtime.Types.Result.GetResult<Prisma.$UsersOnRolesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UsersOnRoles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UsersOnRolesFindFirstArgs} args - Arguments to find a UsersOnRoles
   * @example
   * // Get one UsersOnRoles
   * const usersOnRoles = await prisma.usersOnRoles.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UsersOnRolesFindFirstArgs>(args?: Prisma.SelectSubset<T, UsersOnRolesFindFirstArgs<ExtArgs>>): Prisma.Prisma__UsersOnRolesClient<runtime.Types.Result.GetResult<Prisma.$UsersOnRolesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UsersOnRoles that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UsersOnRolesFindFirstOrThrowArgs} args - Arguments to find a UsersOnRoles
   * @example
   * // Get one UsersOnRoles
   * const usersOnRoles = await prisma.usersOnRoles.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UsersOnRolesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UsersOnRolesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UsersOnRolesClient<runtime.Types.Result.GetResult<Prisma.$UsersOnRolesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UsersOnRoles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UsersOnRolesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UsersOnRoles
   * const usersOnRoles = await prisma.usersOnRoles.findMany()
   * 
   * // Get first 10 UsersOnRoles
   * const usersOnRoles = await prisma.usersOnRoles.findMany({ take: 10 })
   * 
   * // Only select the `userId`
   * const usersOnRolesWithUserIdOnly = await prisma.usersOnRoles.findMany({ select: { userId: true } })
   * 
   */
  findMany<T extends UsersOnRolesFindManyArgs>(args?: Prisma.SelectSubset<T, UsersOnRolesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UsersOnRolesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UsersOnRoles.
   * @param {UsersOnRolesCreateArgs} args - Arguments to create a UsersOnRoles.
   * @example
   * // Create one UsersOnRoles
   * const UsersOnRoles = await prisma.usersOnRoles.create({
   *   data: {
   *     // ... data to create a UsersOnRoles
   *   }
   * })
   * 
   */
  create<T extends UsersOnRolesCreateArgs>(args: Prisma.SelectSubset<T, UsersOnRolesCreateArgs<ExtArgs>>): Prisma.Prisma__UsersOnRolesClient<runtime.Types.Result.GetResult<Prisma.$UsersOnRolesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UsersOnRoles.
   * @param {UsersOnRolesCreateManyArgs} args - Arguments to create many UsersOnRoles.
   * @example
   * // Create many UsersOnRoles
   * const usersOnRoles = await prisma.usersOnRoles.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UsersOnRolesCreateManyArgs>(args?: Prisma.SelectSubset<T, UsersOnRolesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UsersOnRoles and returns the data saved in the database.
   * @param {UsersOnRolesCreateManyAndReturnArgs} args - Arguments to create many UsersOnRoles.
   * @example
   * // Create many UsersOnRoles
   * const usersOnRoles = await prisma.usersOnRoles.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UsersOnRoles and only return the `userId`
   * const usersOnRolesWithUserIdOnly = await prisma.usersOnRoles.createManyAndReturn({
   *   select: { userId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UsersOnRolesCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UsersOnRolesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UsersOnRolesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UsersOnRoles.
   * @param {UsersOnRolesDeleteArgs} args - Arguments to delete one UsersOnRoles.
   * @example
   * // Delete one UsersOnRoles
   * const UsersOnRoles = await prisma.usersOnRoles.delete({
   *   where: {
   *     // ... filter to delete one UsersOnRoles
   *   }
   * })
   * 
   */
  delete<T extends UsersOnRolesDeleteArgs>(args: Prisma.SelectSubset<T, UsersOnRolesDeleteArgs<ExtArgs>>): Prisma.Prisma__UsersOnRolesClient<runtime.Types.Result.GetResult<Prisma.$UsersOnRolesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UsersOnRoles.
   * @param {UsersOnRolesUpdateArgs} args - Arguments to update one UsersOnRoles.
   * @example
   * // Update one UsersOnRoles
   * const usersOnRoles = await prisma.usersOnRoles.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UsersOnRolesUpdateArgs>(args: Prisma.SelectSubset<T, UsersOnRolesUpdateArgs<ExtArgs>>): Prisma.Prisma__UsersOnRolesClient<runtime.Types.Result.GetResult<Prisma.$UsersOnRolesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UsersOnRoles.
   * @param {UsersOnRolesDeleteManyArgs} args - Arguments to filter UsersOnRoles to delete.
   * @example
   * // Delete a few UsersOnRoles
   * const { count } = await prisma.usersOnRoles.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UsersOnRolesDeleteManyArgs>(args?: Prisma.SelectSubset<T, UsersOnRolesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UsersOnRoles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UsersOnRolesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UsersOnRoles
   * const usersOnRoles = await prisma.usersOnRoles.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UsersOnRolesUpdateManyArgs>(args: Prisma.SelectSubset<T, UsersOnRolesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UsersOnRoles and returns the data updated in the database.
   * @param {UsersOnRolesUpdateManyAndReturnArgs} args - Arguments to update many UsersOnRoles.
   * @example
   * // Update many UsersOnRoles
   * const usersOnRoles = await prisma.usersOnRoles.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UsersOnRoles and only return the `userId`
   * const usersOnRolesWithUserIdOnly = await prisma.usersOnRoles.updateManyAndReturn({
   *   select: { userId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UsersOnRolesUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UsersOnRolesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UsersOnRolesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UsersOnRoles.
   * @param {UsersOnRolesUpsertArgs} args - Arguments to update or create a UsersOnRoles.
   * @example
   * // Update or create a UsersOnRoles
   * const usersOnRoles = await prisma.usersOnRoles.upsert({
   *   create: {
   *     // ... data to create a UsersOnRoles
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UsersOnRoles we want to update
   *   }
   * })
   */
  upsert<T extends UsersOnRolesUpsertArgs>(args: Prisma.SelectSubset<T, UsersOnRolesUpsertArgs<ExtArgs>>): Prisma.Prisma__UsersOnRolesClient<runtime.Types.Result.GetResult<Prisma.$UsersOnRolesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UsersOnRoles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UsersOnRolesCountArgs} args - Arguments to filter UsersOnRoles to count.
   * @example
   * // Count the number of UsersOnRoles
   * const count = await prisma.usersOnRoles.count({
   *   where: {
   *     // ... the filter for the UsersOnRoles we want to count
   *   }
   * })
  **/
  count<T extends UsersOnRolesCountArgs>(
    args?: Prisma.Subset<T, UsersOnRolesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UsersOnRolesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UsersOnRoles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UsersOnRolesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UsersOnRolesAggregateArgs>(args: Prisma.Subset<T, UsersOnRolesAggregateArgs>): Prisma.PrismaPromise<GetUsersOnRolesAggregateType<T>>

  /**
   * Group by UsersOnRoles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UsersOnRolesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UsersOnRolesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UsersOnRolesGroupByArgs['orderBy'] }
      : { orderBy?: UsersOnRolesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UsersOnRolesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersOnRolesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UsersOnRoles model
 */
readonly fields: UsersOnRolesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UsersOnRoles.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UsersOnRolesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  role<T extends Prisma.RoleDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.RoleDefaultArgs<ExtArgs>>): Prisma.Prisma__RoleClient<runtime.Types.Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UsersOnRoles model
 */
export interface UsersOnRolesFieldRefs {
  readonly userId: Prisma.FieldRef<"UsersOnRoles", 'String'>
  readonly roleId: Prisma.FieldRef<"UsersOnRoles", 'String'>
  readonly assignedAt: Prisma.FieldRef<"UsersOnRoles", 'DateTime'>
}
    

// Custom InputTypes
/**
 * UsersOnRoles findUnique
 */
export type UsersOnRolesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UsersOnRoles
   */
  select?: Prisma.UsersOnRolesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UsersOnRoles
   */
  omit?: Prisma.UsersOnRolesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UsersOnRolesInclude<ExtArgs> | null
  /**
   * Filter, which UsersOnRoles to fetch.
   */
  where: Prisma.UsersOnRolesWhereUniqueInput
}

/**
 * UsersOnRoles findUniqueOrThrow
 */
export type UsersOnRolesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UsersOnRoles
   */
  select?: Prisma.UsersOnRolesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UsersOnRoles
   */
  omit?: Prisma.UsersOnRolesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UsersOnRolesInclude<ExtArgs> | null
  /**
   * Filter, which UsersOnRoles to fetch.
   */
  where: Prisma.UsersOnRolesWhereUniqueInput
}

/**
 * UsersOnRoles findFirst
 */
export type UsersOnRolesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UsersOnRoles
   */
  select?: Prisma.UsersOnRolesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UsersOnRoles
   */
  omit?: Prisma.UsersOnRolesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UsersOnRolesInclude<ExtArgs> | null
  /**
   * Filter, which UsersOnRoles to fetch.
   */
  where?: Prisma.UsersOnRolesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UsersOnRoles to fetch.
   */
  orderBy?: Prisma.UsersOnRolesOrderByWithRelationInput | Prisma.UsersOnRolesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UsersOnRoles.
   */
  cursor?: Prisma.UsersOnRolesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UsersOnRoles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UsersOnRoles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UsersOnRoles.
   */
  distinct?: Prisma.UsersOnRolesScalarFieldEnum | Prisma.UsersOnRolesScalarFieldEnum[]
}

/**
 * UsersOnRoles findFirstOrThrow
 */
export type UsersOnRolesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UsersOnRoles
   */
  select?: Prisma.UsersOnRolesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UsersOnRoles
   */
  omit?: Prisma.UsersOnRolesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UsersOnRolesInclude<ExtArgs> | null
  /**
   * Filter, which UsersOnRoles to fetch.
   */
  where?: Prisma.UsersOnRolesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UsersOnRoles to fetch.
   */
  orderBy?: Prisma.UsersOnRolesOrderByWithRelationInput | Prisma.UsersOnRolesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UsersOnRoles.
   */
  cursor?: Prisma.UsersOnRolesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UsersOnRoles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UsersOnRoles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UsersOnRoles.
   */
  distinct?: Prisma.UsersOnRolesScalarFieldEnum | Prisma.UsersOnRolesScalarFieldEnum[]
}

/**
 * UsersOnRoles findMany
 */
export type UsersOnRolesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UsersOnRoles
   */
  select?: Prisma.UsersOnRolesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UsersOnRoles
   */
  omit?: Prisma.UsersOnRolesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UsersOnRolesInclude<ExtArgs> | null
  /**
   * Filter, which UsersOnRoles to fetch.
   */
  where?: Prisma.UsersOnRolesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UsersOnRoles to fetch.
   */
  orderBy?: Prisma.UsersOnRolesOrderByWithRelationInput | Prisma.UsersOnRolesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UsersOnRoles.
   */
  cursor?: Prisma.UsersOnRolesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UsersOnRoles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UsersOnRoles.
   */
  skip?: number
  distinct?: Prisma.UsersOnRolesScalarFieldEnum | Prisma.UsersOnRolesScalarFieldEnum[]
}

/**
 * UsersOnRoles create
 */
export type UsersOnRolesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UsersOnRoles
   */
  select?: Prisma.UsersOnRolesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UsersOnRoles
   */
  omit?: Prisma.UsersOnRolesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UsersOnRolesInclude<ExtArgs> | null
  /**
   * The data needed to create a UsersOnRoles.
   */
  data: Prisma.XOR<Prisma.UsersOnRolesCreateInput, Prisma.UsersOnRolesUncheckedCreateInput>
}

/**
 * UsersOnRoles createMany
 */
export type UsersOnRolesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UsersOnRoles.
   */
  data: Prisma.UsersOnRolesCreateManyInput | Prisma.UsersOnRolesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UsersOnRoles createManyAndReturn
 */
export type UsersOnRolesCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UsersOnRoles
   */
  select?: Prisma.UsersOnRolesSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UsersOnRoles
   */
  omit?: Prisma.UsersOnRolesOmit<ExtArgs> | null
  /**
   * The data used to create many UsersOnRoles.
   */
  data: Prisma.UsersOnRolesCreateManyInput | Prisma.UsersOnRolesCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UsersOnRolesIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * UsersOnRoles update
 */
export type UsersOnRolesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UsersOnRoles
   */
  select?: Prisma.UsersOnRolesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UsersOnRoles
   */
  omit?: Prisma.UsersOnRolesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UsersOnRolesInclude<ExtArgs> | null
  /**
   * The data needed to update a UsersOnRoles.
   */
  data: Prisma.XOR<Prisma.UsersOnRolesUpdateInput, Prisma.UsersOnRolesUncheckedUpdateInput>
  /**
   * Choose, which UsersOnRoles to update.
   */
  where: Prisma.UsersOnRolesWhereUniqueInput
}

/**
 * UsersOnRoles updateMany
 */
export type UsersOnRolesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UsersOnRoles.
   */
  data: Prisma.XOR<Prisma.UsersOnRolesUpdateManyMutationInput, Prisma.UsersOnRolesUncheckedUpdateManyInput>
  /**
   * Filter which UsersOnRoles to update
   */
  where?: Prisma.UsersOnRolesWhereInput
  /**
   * Limit how many UsersOnRoles to update.
   */
  limit?: number
}

/**
 * UsersOnRoles updateManyAndReturn
 */
export type UsersOnRolesUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UsersOnRoles
   */
  select?: Prisma.UsersOnRolesSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UsersOnRoles
   */
  omit?: Prisma.UsersOnRolesOmit<ExtArgs> | null
  /**
   * The data used to update UsersOnRoles.
   */
  data: Prisma.XOR<Prisma.UsersOnRolesUpdateManyMutationInput, Prisma.UsersOnRolesUncheckedUpdateManyInput>
  /**
   * Filter which UsersOnRoles to update
   */
  where?: Prisma.UsersOnRolesWhereInput
  /**
   * Limit how many UsersOnRoles to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UsersOnRolesIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * UsersOnRoles upsert
 */
export type UsersOnRolesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UsersOnRoles
   */
  select?: Prisma.UsersOnRolesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UsersOnRoles
   */
  omit?: Prisma.UsersOnRolesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UsersOnRolesInclude<ExtArgs> | null
  /**
   * The filter to search for the UsersOnRoles to update in case it exists.
   */
  where: Prisma.UsersOnRolesWhereUniqueInput
  /**
   * In case the UsersOnRoles found by the `where` argument doesn't exist, create a new UsersOnRoles with this data.
   */
  create: Prisma.XOR<Prisma.UsersOnRolesCreateInput, Prisma.UsersOnRolesUncheckedCreateInput>
  /**
   * In case the UsersOnRoles was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UsersOnRolesUpdateInput, Prisma.UsersOnRolesUncheckedUpdateInput>
}

/**
 * UsersOnRoles delete
 */
export type UsersOnRolesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UsersOnRoles
   */
  select?: Prisma.UsersOnRolesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UsersOnRoles
   */
  omit?: Prisma.UsersOnRolesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UsersOnRolesInclude<ExtArgs> | null
  /**
   * Filter which UsersOnRoles to delete.
   */
  where: Prisma.UsersOnRolesWhereUniqueInput
}

/**
 * UsersOnRoles deleteMany
 */
export type UsersOnRolesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UsersOnRoles to delete
   */
  where?: Prisma.UsersOnRolesWhereInput
  /**
   * Limit how many UsersOnRoles to delete.
   */
  limit?: number
}

/**
 * UsersOnRoles without action
 */
export type UsersOnRolesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UsersOnRoles
   */
  select?: Prisma.UsersOnRolesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UsersOnRoles
   */
  omit?: Prisma.UsersOnRolesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UsersOnRolesInclude<ExtArgs> | null
}
